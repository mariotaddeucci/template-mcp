name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [format-check, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run ${{ matrix.check }}
      run: uv run task ${{ matrix.check }}

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run security scan
      run: uv run task security
      continue-on-error: false
      env:
        SEMGREP_SEND_METRICS: "off"

  tests:
    name: Tests with Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run tests with coverage
      run: uv run task test-cov

    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      if: success()
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Combined job for final verification
  verify:
    name: Final Verification
    runs-on: ubuntu-latest
    needs: [code-quality, security, tests]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "Code quality: ${{ needs.code-quality.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Tests: ${{ needs.tests.result }}"
        
        if [ "${{ needs.code-quality.result }}" != "success" ] || \
           [ "${{ needs.security.result }}" != "success" ] || \
           [ "${{ needs.tests.result }}" != "success" ]; then
          echo "❌ Some checks failed"
          exit 1
        else
          echo "✅ All checks passed"
        fi