[project]
name = "template-mcp"
version = "0.1.0"
description = "Servidor MCP seguro com FastMCP e Eunomia Authorization - controle de acesso granular com políticas JSON dinâmicas"
authors = [
    {name = "Mario Taddeucci", email = "mario.taddeucci@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["mcp", "fastmcp", "eunomia", "authorization", "security", "server"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastmcp>=2.10.6",
    "eunomia-ai>=0.3.9",
    "eunomia-sdk>=0.3.9",
    "pydantic>=2.0.0",
    "python-dotenv",
    "loguru",
    "structlog",
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "ruff>=0.12.7",
    "semgrep",
    "taskipy>=1.14.1",
]
test = [
    "pytest>=8.4.1",
    "pytest-asyncio",
    "pytest-cov",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/template_mcp"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
]
asyncio_mode = "auto"

[tool.ruff]
target-version = "py312"
line-length = 120

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # flake8-bandit (security)
    "N",   # pep8-naming
    "T20", # flake8-print
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101"]  # allow assert in tests

[tool.taskipy.tasks]
test = "pytest"
test-cov = "pytest --cov=src --cov-report=html --cov-report=term-missing"
lint = "ruff check src tests"
format = "ruff format src tests"
format-check = "ruff format --check src tests"
security = "semgrep --config=auto src/"
security-full = "semgrep --config=p/security-audit --config=p/secrets --config=p/python src/"
pre-commit = "ruff check src tests && ruff format --check src tests && semgrep --config=auto src/ && pytest"
dev-setup = "uv sync --all-extras"
